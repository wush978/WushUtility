// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// expand
SEXP expand(List src, IntegerVector size, LogicalVector is_split, const std::string& delim = ",");
RcppExport SEXP WushUtility_expand(SEXP srcSEXP, SEXP sizeSEXP, SEXP is_splitSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type src(srcSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP );
        Rcpp::traits::input_parameter< LogicalVector >::type is_split(is_splitSEXP );
        Rcpp::traits::input_parameter< const std::string& >::type delim(delimSEXP );
        SEXP __result = expand(src, size, is_split, delim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// expandOrder
SEXP expandOrder(IntegerVector size);
RcppExport SEXP WushUtility_expandOrder(SEXP sizeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP );
        SEXP __result = expandOrder(size);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ompBase64Decode
SEXP ompBase64Decode(CharacterVector src);
RcppExport SEXP WushUtility_ompBase64Decode(SEXP srcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type src(srcSEXP );
        SEXP __result = ompBase64Decode(src);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ompReadLines
SEXP ompReadLines(RawVector src, const std::string& breakline = "\n");
RcppExport SEXP WushUtility_ompReadLines(SEXP srcSEXP, SEXP breaklineSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RawVector >::type src(srcSEXP );
        Rcpp::traits::input_parameter< const std::string& >::type breakline(breaklineSEXP );
        SEXP __result = ompReadLines(src, breakline);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ompSum_numeric
double ompSum_numeric(NumericVector src);
RcppExport SEXP WushUtility_ompSum_numeric(SEXP srcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type src(srcSEXP );
        double __result = ompSum_numeric(src);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// splitSize
SEXP splitSize(CharacterVector src, char delim);
RcppExport SEXP WushUtility_splitSize(SEXP srcSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type src(srcSEXP );
        Rcpp::traits::input_parameter< char >::type delim(delimSEXP );
        SEXP __result = splitSize(src, delim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// splitToList_character
SEXP splitToList_character(CharacterVector src, int size, char delim);
RcppExport SEXP WushUtility_splitToList_character(SEXP srcSEXP, SEXP sizeSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type src(srcSEXP );
        Rcpp::traits::input_parameter< int >::type size(sizeSEXP );
        Rcpp::traits::input_parameter< char >::type delim(delimSEXP );
        SEXP __result = splitToList_character(src, size, delim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// splitToList_factor
SEXP splitToList_factor(IntegerVector src, int size, char delim);
RcppExport SEXP WushUtility_splitToList_factor(SEXP srcSEXP, SEXP sizeSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type src(srcSEXP );
        Rcpp::traits::input_parameter< int >::type size(sizeSEXP );
        Rcpp::traits::input_parameter< char >::type delim(delimSEXP );
        SEXP __result = splitToList_factor(src, size, delim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// syncSize
IntegerVector syncSize(List src);
RcppExport SEXP WushUtility_syncSize(SEXP srcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type src(srcSEXP );
        IntegerVector __result = syncSize(src);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// write_svmlight_matrix
void write_svmlight_matrix(NumericMatrix m, NumericVector y, IntegerVector qid, const std::string& path, bool is_gzip = true);
RcppExport SEXP WushUtility_write_svmlight_matrix(SEXP mSEXP, SEXP ySEXP, SEXP qidSEXP, SEXP pathSEXP, SEXP is_gzipSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type qid(qidSEXP );
        Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP );
        Rcpp::traits::input_parameter< bool >::type is_gzip(is_gzipSEXP );
        write_svmlight_matrix(m, y, qid, path, is_gzip);
    }
    return R_NilValue;
END_RCPP
}
// write_svmlight_dgCMatrix
void write_svmlight_dgCMatrix(S4 m, NumericVector y, IntegerVector qid, const std::string& path, bool is_gzip = true);
RcppExport SEXP WushUtility_write_svmlight_dgCMatrix(SEXP mSEXP, SEXP ySEXP, SEXP qidSEXP, SEXP pathSEXP, SEXP is_gzipSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type m(mSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type qid(qidSEXP );
        Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP );
        Rcpp::traits::input_parameter< bool >::type is_gzip(is_gzipSEXP );
        write_svmlight_dgCMatrix(m, y, qid, path, is_gzip);
    }
    return R_NilValue;
END_RCPP
}
